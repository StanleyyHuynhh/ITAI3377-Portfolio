Reflective Journal: IIoT Protocols Project
Introduction
In this project, I explored and implemented an Industrial IoT (IIoT) simulation using three different communication protocols: MQTT, CoAP, and OPC UA. The primary objective was to simulate sensor data (temperature and humidity), publish and subscribe to this data, and visualize it in real time using Python. I set personal goals to deepen my understanding of these protocols, integrate them into a single project, and learn how to handle common challenges in real-world IoT environments.
Personal Contributions
Code Development:
 I was responsible for writing and testing the simulation scripts for MQTT, CoAP, and OPC UA. I implemented the sensor data generators, integrated MQTT with the Mosquitto broker, and developed visualization scripts using Matplotlib.


Visualization and Data Handling:
 I designed the data visualization components, ensuring that real-time data from each protocol could be accurately and clearly plotted. I worked on merging the different data sources into a unified view.


Documentation and Reporting:
 I contributed to writing the README and the comparison report, clearly outlining the functionality and performance of each protocol. I also prepared a reflective journal to document my learning process and challenges encountered.


Learning Outcomes
MQTT:
 I learned that MQTT is lightweight, efficient, and widely adopted for IoT applications. Its publish/subscribe model is straightforward, making it ideal for rapid prototyping and real-time data transfer. However, I encountered deprecation warnings initially due to the use of older callback APIs, which I resolved by switching to MQTT v5.


CoAP:
 Working with CoAP introduced me to a REST-like protocol designed for constrained environments. I discovered that, unlike MQTT, CoAP operates over UDP and requires a different approach for verifying data transmission, especially since the client only receives generic responses from the server unless additional logging is implemented.


OPC UA:
 OPC UA offered a deeper dive into industrial automation with its robust data modeling capabilities and built-in security features. The OPC UA simulation provided a more comprehensive view of sensor data through an actual server implementation, which contrasted nicely with the more lightweight approaches of MQTT and CoAP.


General Insights:
 The project reinforced the importance of understanding both the theoretical underpinnings and the practical aspects of each protocol. I gained hands-on experience with integrating diverse technologies, debugging multi-threaded environments (e.g., handling GUI updates on the main thread), and appreciating how protocols are chosen based on specific application needs.


Challenges and Solutions
Deprecation Warnings in MQTT:
 I encountered deprecation warnings due to the older callback API. The solution was to upgrade to MQTT v5 and adjust the callback function signatures accordingly. This resolved the warnings and ensured future compatibility.


Threading and GUI Updates:
 A significant challenge arose when updating Matplotlib plots from a non-main thread, which caused runtime errors like "main thread is not in main loop." I solved this by moving all GUI updates into the main thread, using an infinite loop that periodically refreshed the plot.


Data Verification in CoAP:
 With CoAP, the client only received a generic acknowledgment ("Data received"), making it difficult to confirm that the sensor data was correctly transmitted. I addressed this by modifying the CoAP server to print or log the received payload, ensuring that the actual temperature and humidity data was captured.


Integration of Multiple Protocols:
 Merging data from three different protocols into a single visualization required careful design and synchronization. I learned to design each module independently and then create a unified data handling strategy to integrate the different data streams.


Future Applications
Professional Scenarios:
 The skills and insights gained from this project are directly applicable to real-world industrial IoT deployments. I can use these techniques to design robust monitoring systems that integrate data from various sensor networks using different protocols.


Potential Improvements:
 Future iterations could include:


Enhanced security features, especially for MQTT and CoAP.
More sophisticated data visualization tools (e.g., web-based dashboards).
Integration with real sensor hardware to move beyond simulated data.
Better error handling and logging for production environments.
Next Steps:
 I plan to explore additional protocols and technologies, such as integrating cloud IoT platforms and advanced analytics. This project has laid a solid foundation for further research into IIoT systems, and I am excited to build on this work in future projects.


Conclusion:
 This IIoT Protocols Project was a valuable learning experience that combined theory with practical application. The challenges I encountered and overcame have significantly deepened my understanding of MQTT, CoAP, and OPC UA, and have prepared me for future endeavors in IoT and industrial automation.










References
(n.d.). Eclipse Mosquitto. Retrieved March 12, 2025, from https://mosquitto.org/

